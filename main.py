from requests import patch, get
from datetime import datetime
from time import sleep
from json import loads, dump, load
from time import time
from os import path

def get_emoji(desc):
    if '–æ–±–ª' in desc:
        if '—è—Å–Ω' in desc:
            return '‚õÖ'
        return '‚òÅÔ∏è'
    if '–ø–∞—Å–º—É—Ä–Ω–æ' in desc:
        return '‚òÅÔ∏è'
    if '–¥–æ–∂–¥' in desc:
        if '–Ω–µ–±–æ–ª—å—à–æ–π' in desc:
            return 'üå¶Ô∏è'
        return 'üåßÔ∏è'
    if '—Å–æ–ª–Ω' in desc or '—è—Å–Ω–æ' in desc:
        return '‚òÄÔ∏è'
    if '—Ç—É–º–∞–Ω' in desc:
        return 'üå´Ô∏è'
    return ''

def get_status(city):
    freq = 1200
    last_req = freq
    data = ''
    if path.isfile(city):
        t = path.getmtime(city)
        last_req = round(time() - t)
    if last_req >= freq:
        appid = ''
        lang = 'ru'
        url = 'https://api.openweathermap.org/data/2.5/weather'
        res = get(url, params={'q': city, 'lang': lang, 'appid': appid})
        data = res.json()
        with open(city, 'w') as f:
            dump(data, f)
    else:
        with open(city) as f:
            data = load(f)
    desc = data['weather'][0]['description'].capitalize()
    speed = data['wind']['speed']
    temp = round(data['main']['temp'] - 273.15)
    tm = datetime.now().strftime('%H:%M:%S')
    sunrise = datetime.utcfromtimestamp(data['sys']['sunrise'] + data['timezone']).strftime('%H:%M:%S') 
    sunset = datetime.utcfromtimestamp(data['sys']['sunset'] + data['timezone']).strftime('%H:%M:%S') 
    emoji_name = get_emoji(desc.lower())

    status = "{} –≤ –≥–æ—Ä–æ–¥–µ {} {}¬∞C  –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ {} –º/c –í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞: {} –í—Ä–µ–º—è –∑–∞—Ö–æ–¥–∞: {} –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {}!".format(desc, data['name'], temp, speed, sunrise, sunset, tm)
            
    return {'custom_status': {'text': status, 'emoji_name': emoji_name}}

def main():
    url = 'https://discord.com/api/v8/users/@me/settings'
    key = ''
    head = {'authorization': key}
    my_city = 'Tver'
    while 1:
        payload = get_status(my_city)
        r = patch(url, json=payload, headers=head)
        res = loads(r.text)
        print(res)
        sleep(5)

if __name__ == '__main__':
    main()